a process group is a collection of related processes, and a session is a collection of related process groups.

A process group is a set of one or more processes sharing the same process group identifier (PGID).

A process group has a process group leader, which is the process that creates the group and whose process ID becomes the
process group ID of the group.

The process group leader need not be the last member of a process group.



A session is a collection of process groups. A process’s session membership is determined by its session identifier (SID),

A session leader is the process that creates a new session and whose process ID becomes the session ID.

All of the processes in a session share a single controlling terminal.At any point in time, one of the process groups in a
session is the foreground process group for the terminal, and the others are background process groups.

 Only pro- cesses in the foreground process group can read input from the controlling termi- nal. When the user types one of
 the signal-generating terminal characters on the controlling terminal, a signal is sent to all members of the foreground
 process group.

 As a consequence of establishing the connection to (i.e., opening) the control- ling terminal, the session leader becomes
 the controlling process for the terminal. The principal significance of being the controlling process is that the kernel
 sends this process a SIGHUP signal if a terminal disconnect occurs.

 The login shell becomes the session leader and the controlling process for the terminal, and is also made the sole member
 of its own process group. Each command or pipeline of commands started from the shell results in the creation of one or more
 processes, and the shell places all of these processes in a new process group

 a process may not change the process group ID of one of its children after that child has performed an exec()

 The setsid() system call creates a new session as follows:

The calling process becomes the leader of a new session, and is made the leader of a new process group within that session.
The calling process’s process group ID and session ID are set to the same value as its process ID.

  The calling process has no controlling terminal. Any previously existing con- nection to a controlling terminal is broken.

Verify with program.Also verify who is process group id of orphan process.?

The restriction against a process group leader being able to call setsid() is necessary because, without it, the process
group leader would be able to place itself in another (new) session, while other members of the process group remained in
the original session. (A new process group would not be created, since, by definition, the process group leader’s process
group ID is already the same as its process ID.) This would violate the strict two-level hierarchy of sessions and process
groups, whereby all members of a process group must be part of the same session.

 Upon creation, a session has no controlling terminal; the controlling terminal is established when the session leader first
 opens a terminal that is not already the controlling termi- nal for a session, unless the O_NOCTTY flag is specified when
 calling open(). A terminal may be the controlling terminal for at most one session.When a session leader opens a controlling
 terminal, it simultaneously becomes the controlling process for the terminal. If a terminal disconnect subsequently occurs,
 the kernel sends the controlling process a SIGHUP signal to inform it of this event.



Job Control

Job control permits a shell user to simultaneously execute multiple commands (jobs), one in the foreground and the others in
the background. Jobs can be stopped and resumed, and moved between the foreground and background.

When we enter a command terminated by an ampersand (&), it is run as a back- ground job

Each job that is placed in the background is assigned a unique job number by the shell. This job number is shown in square
brackets after the job is started in the background, and also when the job is manipulated or monitored by various job- control
commands. The number following the job number is the process ID of the process created to execute the command, or, in the case
of a pipeline, the process ID of the last process in the pipeline.The current and previous current jobs are marked by a
plus (+) and a minus (–) sign, respec- tively, in the output produced by the jobs command,

 

After we typed Control-Z, the shell displays the command that has been stopped in the background. If desired, we can use the
fg command to resume the job in the foreground, or use the bg command to resume it in the background. In both cases,
the shell resumes the stopped job by sending it a SIGCONT signal.



The jobs shell built-in command lists all background jobs.The term job is often used synonymously with the term process group.

 Only processes in the foreground job may read from the controlling terminal. This restriction prevents multiple jobs from
 competing for terminal input. If a back- ground job tries to read from the terminal, it is sent a SIGTTIN signal. The default
 action of SIGTTIN is to stop the job

 By default, background jobs are allowed to perform output to the controlling terminal.However, if the TOSTOP flag (terminal
 output stop) is set for the terminal, then attempts by background jobs to perform terminal output result in the generation
 of a SIGTTOU signal.Like SIGTTIN, a SIGTTOU signal stops the job

1. Terminal read (SIGTTIN)

2. Terminal write (+TOSTOP) (SIGTTOU)

we know that signals can generally be sent to a process only if the real or effective user ID of the sending process matches
the real user ID or saved set-user-ID of the receiving process. However, SIGCONT is an exception to this rule. The kernel
allows a process (e.g., the shell) to send SIGCONT to any pro- cess in the same session, regardless of process credentials.
This relaxation of the rules for SIGCONT is required so that if a user starts a set-user-ID program that changes its
credentials (in particular, its real user ID), it is still possible to resume it with SIGCONT if it is stopped.



The SIGTTIN and SIGTTOU signals
SUSv3 specifies (and Linux implements) some special cases that apply with respect

to the generation of the SIGTTIN and SIGTTOU signals for background jobs:

 SIGTTIN is not sent if the process is currently blocking or ignoring this signal. Instead, a read() from the controlling
 terminal fails, setting errno to EIO. The rationale for this behavior is that the process would otherwise have no way of
 knowing that the read() was not permitted.

􏰀  Even if the terminal TOSTOP flag is set, SIGTTOU is not sent if the process is cur- rently blocking or ignoring this signal. Instead, a write() to the controlling terminal is permitted (i.e., the TOSTOP flag is ignored).

􏰀  Regardless of the setting of the TOSTOP flag, certain functions that change termi- nal driver data structures result in the
generation of SIGTTOU for a background process if it tries to apply them to its controlling terminal. These functions include 
tcsetpgrp(), tcsetattr(), tcflush(), tcflow(), tcsendbreak(), and tcdrain().  If SIGTTOU is being blocked or ignored, these
calls succeed.



Implementing Job Control

In this section, we examine various aspects of the implementation of job control, and conclude with an example program that
makes the operation of job control more transparent.

Although optional in the original POSIX.1 standard, later standards, including SUSv3, require that an implementation support 
job control. This support requires the following:

􏰀The implementation must provide certain job-control signals: SIGTSTP, SIGSTOP, SIGCONT, SIGTTOU, and SIGTTIN. In addition,
the SIGCHLD signal is also necessary, since it allows the shell (the parent of all jobs) to find out when one of its children
terminates or is stopped.

􏰀The terminal driver must support generation of the job-control signals, so that when certain characters are typed, or
terminal I/O and certain other terminal operations (described below) are performed from a background job, an appro- priate
signal is sent to the relevant process group. Inorder to be able to carry out these actions,the terminal driver must also
record the session ID (controlling process) and foreground process group ID associ- ated with a terminal.

The shell must support job control (most modern shells do so). This support is provided in the form of the commands described
earlier to move a job between the foreground and background and monitor the state of jobs. Certain of these commands send 
signals to a job (as shown in Figure 34-2). In addition, when performing operations that move a job between the running in 
foreground and any of the other states, the shell uses calls to tcsetpgrp() to adjust the terminal driver’s record of the 
foreground process group.

